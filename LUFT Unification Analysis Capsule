"""
LUFT Unification Analysis Capsule
Analyzes SDR/SQUID/cosmic .wav data for lattice resonance, pressure effects, and scale invariance.
Compares results to Einstein's field equations and LUFT extensions.
"""

import os
import librosa
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# LUFT resonance frequencies & harmonics
LUFT_RESONANCES = [7468, 7467.779, 7467.879, 7464, 7460, 7456, 7452, 0.050]

RESULTS_DIR = "luft_analysis_results"

def find_wav_files(root="."):
    wav_files = []
    for dirpath, _, filenames in os.walk(root):
        for f in filenames:
            if f.lower().endswith(".wav"):
                wav_files.append(os.path.join(dirpath, f))
    return wav_files

def analyze_lattice_resonance(wav_path):
    y, sr = librosa.load(wav_path, sr=None)
    D = np.abs(librosa.stft(y))
    freqs = librosa.fft_frequencies(sr=sr)
    mean_spectrum = np.mean(D, axis=1)
    peak_indices = np.argpartition(mean_spectrum, -10)[-10:]
    peak_freqs = freqs[peak_indices]
    peak_amps = mean_spectrum[peak_indices]

    annotations = []
    for f, amp in zip(peak_freqs, peak_amps):
        luft_match = min(LUFT_RESONANCES, key=lambda x: abs(x-f))
        luft_delta = abs(luft_match - f)
        annotations.append({
            "freq": f,
            "amplitude": amp,
            "LUFT_match": luft_match,
            "delta": luft_delta,
            "description": ("LUFT resonance candidate" if luft_delta < 10 else "")
        })

    plt.figure(figsize=(10, 4))
    plt.specgram(y, NFFT=2048, Fs=sr, noverlap=512, cmap='magma')
    plt.title(f"Spectrogram: {os.path.basename(wav_path)}")
    plt.xlabel("Time (s)")
    plt.ylabel("Frequency (Hz)")
    plt.colorbar(label="Intensity (dB)")
    plot_path = os.path.join(RESULTS_DIR, os.path.basename(wav_path) + ".png")
    plt.savefig(plot_path)
    plt.close()

    df = pd.DataFrame(annotations)
    table_path = os.path.join(RESULTS_DIR, os.path.basename(wav_path) + ".csv")
    df.to_csv(table_path, index=False)

    md = f"# LUFT Analysis for {os.path.basename(wav_path)}\n\n"
    md += f"**Sample rate:** {sr} Hz\n\n"
    md += f"![Spectrogram]({os.path.basename(plot_path)})\n\n"
    md += "## LUFT Resonance Matches\n\n"
    md += df.to_markdown(index=False)
    md_path = os.path.join(RESULTS_DIR, os.path.basename(wav_path) + ".md")
    with open(md_path, "w") as f_md:
        f_md.write(md)

def main():
    os.makedirs(RESULTS_DIR, exist_ok=True)
    wav_files = find_wav_files(".")
    for wav_path in wav_files:
        print(f"Analyzing {wav_path}...")
        analyze_lattice_resonance(wav_path)
    print("LUFT analysis complete. Results in", RESULTS_DIR)

if __name__ == "__main__":
    main()
